{"version":3,"sources":["Iframe.js","App.js","reportWebVitals.js","index.js"],"names":["IFrame","children","props","useState","contentRef","setContentRef","mountNode","contentWindow","document","body","ref","createPortal","App","jwt","setJWT","useEffect","localStorage","clear","handler","event","origin","data","JSON","parse","console","log","undefined","Status","setItem","stringify","window","addEventListener","removeEventListener","ddcDataInStorage","getItem","className","id","method","action","type","name","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iMAGaA,EAAS,SAAC,GAGhB,IAAD,IAFJC,EAEI,EAFJA,SACGC,EACC,8BACgCC,mBAAS,MADzC,mBACGC,EADH,KACeC,EADf,KAEEC,EAAS,OACbF,QADa,IACbA,GADa,UACbA,EAAYG,qBADC,iBACb,EAA2BC,gBADd,aACb,EAAqCC,KAEvC,OACE,kDAAYP,GAAZ,IAAmBQ,IAAKL,EAAxB,SACGC,GAAaK,uBAAaV,EAAUK,OC8C5BM,MAxDf,WACE,IADa,EAKST,mBAHN,yQAFH,mBAKNU,EALM,KAKDC,EALC,KAQbC,qBAAU,WACRC,aAAaC,QACb,IAAMC,EAAU,SAAAC,GACd,GAAqB,iDAAjBA,EAAMC,OAA2D,CACtE,IAAMC,EAAOC,KAAKC,MAAMJ,EAAME,MAC9BG,QAAQC,IAAI,SAAUN,QACTO,IAATL,GAAsBA,EAAKM,SAC9BH,QAAQC,IAAI,cAAeJ,GAIrBL,aAAaY,QAAQ,UAAWN,KAAKO,UAAUR,OAQvD,OAHAS,OAAOC,iBAAiB,UAAWb,GAG5B,kBAAMY,OAAOE,oBAAoB,UAAWd,MAClD,IAMH,IAGOe,EAAoBX,KAAKC,MAAMP,aAAakB,QAAQ,aAAe,GAE1E,OADAV,QAAQC,IAAI,mBAAoBQ,GAE9B,sBAAKE,UAAU,MAAf,UACE,8DACA,cAAC,EAAD,UACE,uBAAMC,GAAG,iBAAiBC,OAAO,OAAOC,OAAO,iEAA/C,UACI,uBAAOC,KAAK,OAAOC,KAAK,MAAMC,MA3CrB,qBA4CT,uBAAOF,KAAK,OAAOC,KAAK,MAAMC,MAAO5B,EAAK6B,SAXhC,SAACC,GACnB7B,EAAO6B,EAAEC,OAAOH,UAWR,wBAAQF,KAAK,SAAb,yBAIN,wGACA,8DC1CSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhD,SAASiD,eAAe,SAM1BZ,M","file":"static/js/main.5c295f12.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { createPortal } from 'react-dom'\n\nexport const IFrame = ({\n  children,\n  ...props\n}) => {\n  const [contentRef, setContentRef] = useState(null)\n  const mountNode =\n    contentRef?.contentWindow?.document?.body\n\n  return (\n    <iframe {...props} ref={setContentRef}>\n      {mountNode && createPortal(children, mountNode)}\n    </iframe>\n  )\n}","import React, {useEffect, useState} from 'react';\n\nimport { IFrame } from './Iframe'\nfunction App() {\n  const creditCard = '4000000000001091'\n  const jwtInit = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJhODkwZjc2ZC0wYTdkLTQxMTgtOThiMi02YzRiZDEwOGEzNjkiLCJpYXQiOjE2MTgzODA4MDAsImlzcyI6IjYwMWU4M2QxM2UyYmM0MTdiODYzY2FiMSIsIk9yZ1VuaXRJZCI6IjYwMWU4M2QxZTFiNWRiMzY4ZTg5NDVlMiJ9.oDfP2Sle4d1S_wWGJ21PDrgZz9qLQGwx8678V9Q1p_E'\n  \n\n  const [jwt, setJWT] = useState(jwtInit)\n  \n\n  useEffect(() => {\n    localStorage.clear()\n    const handler = event => {\n      if (event.origin === \"https://centinelapistag.cardinalcommerce.com\") {\n\t\t\t\t\tconst data = JSON.parse(event.data);\n\t\t\t\t\tconsole.log('Event:', event);\n\t\t\t\t\tif (data !== undefined && data.Status) {\n\t\t\t\t\t\tconsole.log('DDC result:', data);\n            //Can not set react state, SecurityError: Blocked a frame with origin\n            //setDdcData(data)\n            //store in localstorage instead\n            localStorage.setItem('ddcData', JSON.stringify(data));\n            //setSubmit(true)\n\t\t\t\t\t}\t\t\t\n\t\t\t\t}\n    }\n    window.addEventListener(\"message\", handler)\n\n    // clean up\n    return () => window.removeEventListener(\"message\", handler)\n  }, []) // empty array => run only once\n\n  // useEffect(() => {\n  //   const  ddcDataInStorage =  JSON.parse(localStorage.getItem('ddcData')) || {};\n  // }, [submit])\n\n  const onJWTChange = (e) => {\n    setJWT(e.target.value)\n  }\n  const  ddcDataInStorage =  JSON.parse(localStorage.getItem('ddcData')) || {};\n  console.log('ddcDataInStorage', ddcDataInStorage)\n  return (\n    <div className=\"App\">\n      <h1>3DS2 - iframe JWT validation</h1>\n      <IFrame>\n        <form id=\"collectionForm\" method=\"POST\" action=\"https://centinelapistag.cardinalcommerce.com/V1/Cruise/Collect\" >\n            <input type=\"text\" name=\"Bin\" value={creditCard} />\n            <input type=\"text\" name=\"JWT\" value={jwt} onChange={onJWTChange} />\n            <button type=\"submit\">Submit</button>\n          </form>\n      </IFrame>\n      {/* {ddcData && <p>SessionId: {ddcData.SessionId}</p>} */}\n      <p>Input your JWT and click submit. Open your console to view DDC response</p>\n      <p>Refresh the page to retry</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}